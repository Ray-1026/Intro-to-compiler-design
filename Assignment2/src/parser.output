Terminals unused in grammar

   KWdef


Grammar

    0 $accept: ProgramName $end

    1 ProgramName: ID ';' zeroORmore_decl zeroORmore_func compound KWend

    2 id_list: ID
    3        | id_list ',' ID

    4 args: %empty
    5     | id_list ':' scalar_type

    6 func_return_type: %empty
    7                 | ':' scalar_type

    8 func_decl: ID '(' args ')' func_return_type ';'

    9 func_def: ID '(' args ')' func_return_type compound KWend

   10 scalar_type: KWinteger
   11            | KWreal
   12            | KWstring
   13            | KWboolean

   14 array: KWarray const_int KWof scalar_type
   15      | KWarray const_int KWof array

   16 const_int: Int
   17          | Oct_int

   18 const_literal: const_int
   19              | Float
   20              | Sci
   21              | Str
   22              | KWtrue
   23              | KWfalse

   24 var_decl: KWvar id_list ':' scalar_type ';'
   25         | KWvar id_list ':' array ';'

   26 const_decl: KWvar id_list ':' const_literal ';'
   27           | KWvar id_list ':' '-' Int ';'
   28           | KWvar id_list ':' '-' Float ';'

   29 compound: KWbegin zeroORmore_decl zeroORmore_state KWend
   30         | KWbegin zeroORmore_decl zeroORmore_state compound zeroORmore_decl zeroORmore_state KWend

   31 array_ref: ID '[' expr ']'
   32          | array_ref '[' expr ']'

   33 var_ref: ID
   34        | array_ref

   35 assignment: ID ASSIGN expr ';'
   36           | array_ref ASSIGN expr ';'
   37           | KWprint expr ';'
   38           | KWread var_ref ';'

   39 else_cond: %empty
   40          | KWelse compound

   41 conditional: KWif expr KWthen compound else_cond KWend KWif

   42 while_: KWwhile expr KWdo compound KWend KWdo

   43 for_: KWfor ID ASSIGN Int KWto Int KWdo compound KWend KWdo

   44 ret: KWreturn expr ';'

   45 func_call: ID '(' zeroORmore_expr ')'

   46 expr: var_ref
   47     | const_literal
   48     | func_call
   49     | '-' expr
   50     | expr '+' expr
   51     | expr '-' expr
   52     | expr '*' expr
   53     | expr '/' expr
   54     | expr MOD expr
   55     | '(' expr ')'
   56     | expr '<' expr
   57     | expr '>' expr
   58     | expr '=' expr
   59     | expr LE expr
   60     | expr GE expr
   61     | expr NE expr
   62     | expr AND expr
   63     | expr OR expr
   64     | NOT expr

   65 zeroORmore_func: %empty
   66                | zeroORmore_func func_decl
   67                | zeroORmore_func func_def

   68 zeroORmore_decl: %empty
   69                | zeroORmore_decl var_decl
   70                | zeroORmore_decl const_decl

   71 zeroORmore_state: %empty
   72                 | zeroORmore_state assignment
   73                 | zeroORmore_state conditional
   74                 | zeroORmore_state while_
   75                 | zeroORmore_state for_
   76                 | zeroORmore_state ret
   77                 | zeroORmore_state func_call ';'

   78 zeroORmore_expr: %empty
   79                | expr
   80                | zeroORmore_expr ',' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 45 55
')' (41) 8 9 45 55
'*' (42) 52
'+' (43) 50
',' (44) 3 80
'-' (45) 27 28 49 51
'/' (47) 53
':' (58) 5 7 24 25 26 27 28
';' (59) 1 8 24 25 26 27 28 35 36 37 38 44 77
'<' (60) 56
'=' (61) 58
'>' (62) 57
'[' (91) 31 32
']' (93) 31 32
error (256)
MOD (258) 54
LE (259) 59
NE (260) 61
GE (261) 60
ASSIGN (262) 35 36 43
AND (263) 62
OR (264) 63
NOT (265) 64
KWvar (266) 24 25 26 27 28
KWarray (267) 14 15
KWof (268) 14 15
KWboolean (269) 13
KWinteger (270) 10
KWreal (271) 11
KWstring (272) 12
KWtrue (273) 22
KWfalse (274) 23
KWdef (275)
KWreturn (276) 44
KWbegin (277) 29 30
KWend (278) 1 9 29 30 41 42 43
KWwhile (279) 42
KWdo (280) 42 43
KWif (281) 41
KWthen (282) 41
KWelse (283) 40
KWfor (284) 43
KWto (285) 43
KWprint (286) 37
KWread (287) 38
ID (288) 1 2 3 8 9 31 33 35 43 45
Int (289) 16 27 43
Oct_int (290) 17
Float (291) 19 28
Sci (292) 20
Str (293) 21


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
ProgramName (54)
    on left: 1, on right: 0
id_list (55)
    on left: 2 3, on right: 3 5 24 25 26 27 28
args (56)
    on left: 4 5, on right: 8 9
func_return_type (57)
    on left: 6 7, on right: 8 9
func_decl (58)
    on left: 8, on right: 66
func_def (59)
    on left: 9, on right: 67
scalar_type (60)
    on left: 10 11 12 13, on right: 5 7 14 24
array (61)
    on left: 14 15, on right: 15 25
const_int (62)
    on left: 16 17, on right: 14 15 18
const_literal (63)
    on left: 18 19 20 21 22 23, on right: 26 47
var_decl (64)
    on left: 24 25, on right: 69
const_decl (65)
    on left: 26 27 28, on right: 70
compound (66)
    on left: 29 30, on right: 1 9 30 40 41 42 43
array_ref (67)
    on left: 31 32, on right: 32 34 36
var_ref (68)
    on left: 33 34, on right: 38 46
assignment (69)
    on left: 35 36 37 38, on right: 72
else_cond (70)
    on left: 39 40, on right: 41
conditional (71)
    on left: 41, on right: 73
while_ (72)
    on left: 42, on right: 74
for_ (73)
    on left: 43, on right: 75
ret (74)
    on left: 44, on right: 76
func_call (75)
    on left: 45, on right: 48 77
expr (76)
    on left: 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
    64, on right: 31 32 35 36 37 41 42 44 49 50 51 52 53 54 55 56 57
    58 59 60 61 62 63 64 79 80
zeroORmore_func (77)
    on left: 65 66 67, on right: 1 66 67
zeroORmore_decl (78)
    on left: 68 69 70, on right: 1 29 30 69 70
zeroORmore_state (79)
    on left: 71 72 73 74 75 76 77, on right: 29 30 72 73 74 75 76 77
zeroORmore_expr (80)
    on left: 78 79 80, on right: 45 80


State 0

    0 $accept: . ProgramName $end

    ID  shift, and go to state 1

    ProgramName  go to state 2


State 1

    1 ProgramName: ID . ';' zeroORmore_decl zeroORmore_func compound KWend

    ';'  shift, and go to state 3


State 2

    0 $accept: ProgramName . $end

    $end  shift, and go to state 4


State 3

    1 ProgramName: ID ';' . zeroORmore_decl zeroORmore_func compound KWend

    $default  reduce using rule 68 (zeroORmore_decl)

    zeroORmore_decl  go to state 5


State 4

    0 $accept: ProgramName $end .

    $default  accept


State 5

    1 ProgramName: ID ';' zeroORmore_decl . zeroORmore_func compound KWend
   69 zeroORmore_decl: zeroORmore_decl . var_decl
   70                | zeroORmore_decl . const_decl

    KWvar  shift, and go to state 6

    $default  reduce using rule 65 (zeroORmore_func)

    var_decl         go to state 7
    const_decl       go to state 8
    zeroORmore_func  go to state 9


State 6

   24 var_decl: KWvar . id_list ':' scalar_type ';'
   25         | KWvar . id_list ':' array ';'
   26 const_decl: KWvar . id_list ':' const_literal ';'
   27           | KWvar . id_list ':' '-' Int ';'
   28           | KWvar . id_list ':' '-' Float ';'

    ID  shift, and go to state 10

    id_list  go to state 11


State 7

   69 zeroORmore_decl: zeroORmore_decl var_decl .

    $default  reduce using rule 69 (zeroORmore_decl)


State 8

   70 zeroORmore_decl: zeroORmore_decl const_decl .

    $default  reduce using rule 70 (zeroORmore_decl)


State 9

    1 ProgramName: ID ';' zeroORmore_decl zeroORmore_func . compound KWend
   66 zeroORmore_func: zeroORmore_func . func_decl
   67                | zeroORmore_func . func_def

    KWbegin  shift, and go to state 12
    ID       shift, and go to state 13

    func_decl  go to state 14
    func_def   go to state 15
    compound   go to state 16


State 10

    2 id_list: ID .

    $default  reduce using rule 2 (id_list)


State 11

    3 id_list: id_list . ',' ID
   24 var_decl: KWvar id_list . ':' scalar_type ';'
   25         | KWvar id_list . ':' array ';'
   26 const_decl: KWvar id_list . ':' const_literal ';'
   27           | KWvar id_list . ':' '-' Int ';'
   28           | KWvar id_list . ':' '-' Float ';'

    ','  shift, and go to state 17
    ':'  shift, and go to state 18


State 12

   29 compound: KWbegin . zeroORmore_decl zeroORmore_state KWend
   30         | KWbegin . zeroORmore_decl zeroORmore_state compound zeroORmore_decl zeroORmore_state KWend

    $default  reduce using rule 68 (zeroORmore_decl)

    zeroORmore_decl  go to state 19


State 13

    8 func_decl: ID . '(' args ')' func_return_type ';'
    9 func_def: ID . '(' args ')' func_return_type compound KWend

    '('  shift, and go to state 20


State 14

   66 zeroORmore_func: zeroORmore_func func_decl .

    $default  reduce using rule 66 (zeroORmore_func)


State 15

   67 zeroORmore_func: zeroORmore_func func_def .

    $default  reduce using rule 67 (zeroORmore_func)


State 16

    1 ProgramName: ID ';' zeroORmore_decl zeroORmore_func compound . KWend

    KWend  shift, and go to state 21


State 17

    3 id_list: id_list ',' . ID

    ID  shift, and go to state 22


State 18

   24 var_decl: KWvar id_list ':' . scalar_type ';'
   25         | KWvar id_list ':' . array ';'
   26 const_decl: KWvar id_list ':' . const_literal ';'
   27           | KWvar id_list ':' . '-' Int ';'
   28           | KWvar id_list ':' . '-' Float ';'

    KWarray    shift, and go to state 23
    KWboolean  shift, and go to state 24
    KWinteger  shift, and go to state 25
    KWreal     shift, and go to state 26
    KWstring   shift, and go to state 27
    KWtrue     shift, and go to state 28
    KWfalse    shift, and go to state 29
    Int        shift, and go to state 30
    Oct_int    shift, and go to state 31
    Float      shift, and go to state 32
    Sci        shift, and go to state 33
    Str        shift, and go to state 34
    '-'        shift, and go to state 35

    scalar_type    go to state 36
    array          go to state 37
    const_int      go to state 38
    const_literal  go to state 39


State 19

   29 compound: KWbegin zeroORmore_decl . zeroORmore_state KWend
   30         | KWbegin zeroORmore_decl . zeroORmore_state compound zeroORmore_decl zeroORmore_state KWend
   69 zeroORmore_decl: zeroORmore_decl . var_decl
   70                | zeroORmore_decl . const_decl

    KWvar  shift, and go to state 6

    $default  reduce using rule 71 (zeroORmore_state)

    var_decl          go to state 7
    const_decl        go to state 8
    zeroORmore_state  go to state 40


State 20

    8 func_decl: ID '(' . args ')' func_return_type ';'
    9 func_def: ID '(' . args ')' func_return_type compound KWend

    ID  shift, and go to state 10

    $default  reduce using rule 4 (args)

    id_list  go to state 41
    args     go to state 42


State 21

    1 ProgramName: ID ';' zeroORmore_decl zeroORmore_func compound KWend .

    $default  reduce using rule 1 (ProgramName)


State 22

    3 id_list: id_list ',' ID .

    $default  reduce using rule 3 (id_list)


State 23

   14 array: KWarray . const_int KWof scalar_type
   15      | KWarray . const_int KWof array

    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31

    const_int  go to state 43


State 24

   13 scalar_type: KWboolean .

    $default  reduce using rule 13 (scalar_type)


State 25

   10 scalar_type: KWinteger .

    $default  reduce using rule 10 (scalar_type)


State 26

   11 scalar_type: KWreal .

    $default  reduce using rule 11 (scalar_type)


State 27

   12 scalar_type: KWstring .

    $default  reduce using rule 12 (scalar_type)


State 28

   22 const_literal: KWtrue .

    $default  reduce using rule 22 (const_literal)


State 29

   23 const_literal: KWfalse .

    $default  reduce using rule 23 (const_literal)


State 30

   16 const_int: Int .

    $default  reduce using rule 16 (const_int)


State 31

   17 const_int: Oct_int .

    $default  reduce using rule 17 (const_int)


State 32

   19 const_literal: Float .

    $default  reduce using rule 19 (const_literal)


State 33

   20 const_literal: Sci .

    $default  reduce using rule 20 (const_literal)


State 34

   21 const_literal: Str .

    $default  reduce using rule 21 (const_literal)


State 35

   27 const_decl: KWvar id_list ':' '-' . Int ';'
   28           | KWvar id_list ':' '-' . Float ';'

    Int    shift, and go to state 44
    Float  shift, and go to state 45


State 36

   24 var_decl: KWvar id_list ':' scalar_type . ';'

    ';'  shift, and go to state 46


State 37

   25 var_decl: KWvar id_list ':' array . ';'

    ';'  shift, and go to state 47


State 38

   18 const_literal: const_int .

    $default  reduce using rule 18 (const_literal)


State 39

   26 const_decl: KWvar id_list ':' const_literal . ';'

    ';'  shift, and go to state 48


State 40

   29 compound: KWbegin zeroORmore_decl zeroORmore_state . KWend
   30         | KWbegin zeroORmore_decl zeroORmore_state . compound zeroORmore_decl zeroORmore_state KWend
   72 zeroORmore_state: zeroORmore_state . assignment
   73                 | zeroORmore_state . conditional
   74                 | zeroORmore_state . while_
   75                 | zeroORmore_state . for_
   76                 | zeroORmore_state . ret
   77                 | zeroORmore_state . func_call ';'

    KWreturn  shift, and go to state 49
    KWbegin   shift, and go to state 12
    KWend     shift, and go to state 50
    KWwhile   shift, and go to state 51
    KWif      shift, and go to state 52
    KWfor     shift, and go to state 53
    KWprint   shift, and go to state 54
    KWread    shift, and go to state 55
    ID        shift, and go to state 56

    compound     go to state 57
    array_ref    go to state 58
    assignment   go to state 59
    conditional  go to state 60
    while_       go to state 61
    for_         go to state 62
    ret          go to state 63
    func_call    go to state 64


State 41

    3 id_list: id_list . ',' ID
    5 args: id_list . ':' scalar_type

    ','  shift, and go to state 17
    ':'  shift, and go to state 65


State 42

    8 func_decl: ID '(' args . ')' func_return_type ';'
    9 func_def: ID '(' args . ')' func_return_type compound KWend

    ')'  shift, and go to state 66


State 43

   14 array: KWarray const_int . KWof scalar_type
   15      | KWarray const_int . KWof array

    KWof  shift, and go to state 67


State 44

   27 const_decl: KWvar id_list ':' '-' Int . ';'

    ';'  shift, and go to state 68


State 45

   28 const_decl: KWvar id_list ':' '-' Float . ';'

    ';'  shift, and go to state 69


State 46

   24 var_decl: KWvar id_list ':' scalar_type ';' .

    $default  reduce using rule 24 (var_decl)


State 47

   25 var_decl: KWvar id_list ':' array ';' .

    $default  reduce using rule 25 (var_decl)


State 48

   26 const_decl: KWvar id_list ':' const_literal ';' .

    $default  reduce using rule 26 (const_decl)


State 49

   44 ret: KWreturn . expr ';'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 78


State 50

   29 compound: KWbegin zeroORmore_decl zeroORmore_state KWend .

    $default  reduce using rule 29 (compound)


State 51

   42 while_: KWwhile . expr KWdo compound KWend KWdo

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 79


State 52

   41 conditional: KWif . expr KWthen compound else_cond KWend KWif

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 80


State 53

   43 for_: KWfor . ID ASSIGN Int KWto Int KWdo compound KWend KWdo

    ID  shift, and go to state 81


State 54

   37 assignment: KWprint . expr ';'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 82


State 55

   38 assignment: KWread . var_ref ';'

    ID  shift, and go to state 83

    array_ref  go to state 75
    var_ref    go to state 84


State 56

   31 array_ref: ID . '[' expr ']'
   35 assignment: ID . ASSIGN expr ';'
   45 func_call: ID . '(' zeroORmore_expr ')'

    ASSIGN  shift, and go to state 85
    '('     shift, and go to state 86
    '['     shift, and go to state 87


State 57

   30 compound: KWbegin zeroORmore_decl zeroORmore_state compound . zeroORmore_decl zeroORmore_state KWend

    $default  reduce using rule 68 (zeroORmore_decl)

    zeroORmore_decl  go to state 88


State 58

   32 array_ref: array_ref . '[' expr ']'
   36 assignment: array_ref . ASSIGN expr ';'

    ASSIGN  shift, and go to state 89
    '['     shift, and go to state 90


State 59

   72 zeroORmore_state: zeroORmore_state assignment .

    $default  reduce using rule 72 (zeroORmore_state)


State 60

   73 zeroORmore_state: zeroORmore_state conditional .

    $default  reduce using rule 73 (zeroORmore_state)


State 61

   74 zeroORmore_state: zeroORmore_state while_ .

    $default  reduce using rule 74 (zeroORmore_state)


State 62

   75 zeroORmore_state: zeroORmore_state for_ .

    $default  reduce using rule 75 (zeroORmore_state)


State 63

   76 zeroORmore_state: zeroORmore_state ret .

    $default  reduce using rule 76 (zeroORmore_state)


State 64

   77 zeroORmore_state: zeroORmore_state func_call . ';'

    ';'  shift, and go to state 91


State 65

    5 args: id_list ':' . scalar_type

    KWboolean  shift, and go to state 24
    KWinteger  shift, and go to state 25
    KWreal     shift, and go to state 26
    KWstring   shift, and go to state 27

    scalar_type  go to state 92


State 66

    8 func_decl: ID '(' args ')' . func_return_type ';'
    9 func_def: ID '(' args ')' . func_return_type compound KWend

    ':'  shift, and go to state 93

    $default  reduce using rule 6 (func_return_type)

    func_return_type  go to state 94


State 67

   14 array: KWarray const_int KWof . scalar_type
   15      | KWarray const_int KWof . array

    KWarray    shift, and go to state 23
    KWboolean  shift, and go to state 24
    KWinteger  shift, and go to state 25
    KWreal     shift, and go to state 26
    KWstring   shift, and go to state 27

    scalar_type  go to state 95
    array        go to state 96


State 68

   27 const_decl: KWvar id_list ':' '-' Int ';' .

    $default  reduce using rule 27 (const_decl)


State 69

   28 const_decl: KWvar id_list ':' '-' Float ';' .

    $default  reduce using rule 28 (const_decl)


State 70

   64 expr: NOT . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 97


State 71

   31 array_ref: ID . '[' expr ']'
   33 var_ref: ID .
   45 func_call: ID . '(' zeroORmore_expr ')'

    '('  shift, and go to state 86
    '['  shift, and go to state 87

    $default  reduce using rule 33 (var_ref)


State 72

   49 expr: '-' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 98


State 73

   55 expr: '(' . expr ')'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 99


State 74

   47 expr: const_literal .

    $default  reduce using rule 47 (expr)


State 75

   32 array_ref: array_ref . '[' expr ']'
   34 var_ref: array_ref .

    '['  shift, and go to state 90

    $default  reduce using rule 34 (var_ref)


State 76

   46 expr: var_ref .

    $default  reduce using rule 46 (expr)


State 77

   48 expr: func_call .

    $default  reduce using rule 48 (expr)


State 78

   44 ret: KWreturn expr . ';'
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ';'  shift, and go to state 113


State 79

   42 while_: KWwhile expr . KWdo compound KWend KWdo
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD   shift, and go to state 100
    LE    shift, and go to state 101
    NE    shift, and go to state 102
    GE    shift, and go to state 103
    AND   shift, and go to state 104
    OR    shift, and go to state 105
    KWdo  shift, and go to state 114
    '<'   shift, and go to state 106
    '>'   shift, and go to state 107
    '='   shift, and go to state 108
    '-'   shift, and go to state 109
    '+'   shift, and go to state 110
    '/'   shift, and go to state 111
    '*'   shift, and go to state 112


State 80

   41 conditional: KWif expr . KWthen compound else_cond KWend KWif
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD     shift, and go to state 100
    LE      shift, and go to state 101
    NE      shift, and go to state 102
    GE      shift, and go to state 103
    AND     shift, and go to state 104
    OR      shift, and go to state 105
    KWthen  shift, and go to state 115
    '<'     shift, and go to state 106
    '>'     shift, and go to state 107
    '='     shift, and go to state 108
    '-'     shift, and go to state 109
    '+'     shift, and go to state 110
    '/'     shift, and go to state 111
    '*'     shift, and go to state 112


State 81

   43 for_: KWfor ID . ASSIGN Int KWto Int KWdo compound KWend KWdo

    ASSIGN  shift, and go to state 116


State 82

   37 assignment: KWprint expr . ';'
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ';'  shift, and go to state 117


State 83

   31 array_ref: ID . '[' expr ']'
   33 var_ref: ID .

    '['  shift, and go to state 87

    $default  reduce using rule 33 (var_ref)


State 84

   38 assignment: KWread var_ref . ';'

    ';'  shift, and go to state 118


State 85

   35 assignment: ID ASSIGN . expr ';'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 119


State 86

   45 func_call: ID '(' . zeroORmore_expr ')'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    $default  reduce using rule 78 (zeroORmore_expr)

    const_int        go to state 38
    const_literal    go to state 74
    array_ref        go to state 75
    var_ref          go to state 76
    func_call        go to state 77
    expr             go to state 120
    zeroORmore_expr  go to state 121


State 87

   31 array_ref: ID '[' . expr ']'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 122


State 88

   30 compound: KWbegin zeroORmore_decl zeroORmore_state compound zeroORmore_decl . zeroORmore_state KWend
   69 zeroORmore_decl: zeroORmore_decl . var_decl
   70                | zeroORmore_decl . const_decl

    KWvar  shift, and go to state 6

    $default  reduce using rule 71 (zeroORmore_state)

    var_decl          go to state 7
    const_decl        go to state 8
    zeroORmore_state  go to state 123


State 89

   36 assignment: array_ref ASSIGN . expr ';'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 124


State 90

   32 array_ref: array_ref '[' . expr ']'

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 125


State 91

   77 zeroORmore_state: zeroORmore_state func_call ';' .

    $default  reduce using rule 77 (zeroORmore_state)


State 92

    5 args: id_list ':' scalar_type .

    $default  reduce using rule 5 (args)


State 93

    7 func_return_type: ':' . scalar_type

    KWboolean  shift, and go to state 24
    KWinteger  shift, and go to state 25
    KWreal     shift, and go to state 26
    KWstring   shift, and go to state 27

    scalar_type  go to state 126


State 94

    8 func_decl: ID '(' args ')' func_return_type . ';'
    9 func_def: ID '(' args ')' func_return_type . compound KWend

    KWbegin  shift, and go to state 12
    ';'      shift, and go to state 127

    compound  go to state 128


State 95

   14 array: KWarray const_int KWof scalar_type .

    $default  reduce using rule 14 (array)


State 96

   15 array: KWarray const_int KWof array .

    $default  reduce using rule 15 (array)


State 97

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr
   64     | NOT expr .

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 64 (expr)


State 98

   49 expr: '-' expr .
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    $default  reduce using rule 49 (expr)


State 99

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   55     | '(' expr . ')'
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ')'  shift, and go to state 129


State 100

   54 expr: expr MOD . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 130


State 101

   59 expr: expr LE . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 131


State 102

   61 expr: expr NE . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 132


State 103

   60 expr: expr GE . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 133


State 104

   62 expr: expr AND . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 134


State 105

   63 expr: expr OR . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 135


State 106

   56 expr: expr '<' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 136


State 107

   57 expr: expr '>' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 137


State 108

   58 expr: expr '=' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 138


State 109

   51 expr: expr '-' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 139


State 110

   50 expr: expr '+' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 140


State 111

   53 expr: expr '/' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 141


State 112

   52 expr: expr '*' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 142


State 113

   44 ret: KWreturn expr ';' .

    $default  reduce using rule 44 (ret)


State 114

   42 while_: KWwhile expr KWdo . compound KWend KWdo

    KWbegin  shift, and go to state 12

    compound  go to state 143


State 115

   41 conditional: KWif expr KWthen . compound else_cond KWend KWif

    KWbegin  shift, and go to state 12

    compound  go to state 144


State 116

   43 for_: KWfor ID ASSIGN . Int KWto Int KWdo compound KWend KWdo

    Int  shift, and go to state 145


State 117

   37 assignment: KWprint expr ';' .

    $default  reduce using rule 37 (assignment)


State 118

   38 assignment: KWread var_ref ';' .

    $default  reduce using rule 38 (assignment)


State 119

   35 assignment: ID ASSIGN expr . ';'
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ';'  shift, and go to state 146


State 120

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr
   79 zeroORmore_expr: expr .

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 79 (zeroORmore_expr)


State 121

   45 func_call: ID '(' zeroORmore_expr . ')'
   80 zeroORmore_expr: zeroORmore_expr . ',' expr

    ','  shift, and go to state 147
    ')'  shift, and go to state 148


State 122

   31 array_ref: ID '[' expr . ']'
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ']'  shift, and go to state 149


State 123

   30 compound: KWbegin zeroORmore_decl zeroORmore_state compound zeroORmore_decl zeroORmore_state . KWend
   72 zeroORmore_state: zeroORmore_state . assignment
   73                 | zeroORmore_state . conditional
   74                 | zeroORmore_state . while_
   75                 | zeroORmore_state . for_
   76                 | zeroORmore_state . ret
   77                 | zeroORmore_state . func_call ';'

    KWreturn  shift, and go to state 49
    KWend     shift, and go to state 150
    KWwhile   shift, and go to state 51
    KWif      shift, and go to state 52
    KWfor     shift, and go to state 53
    KWprint   shift, and go to state 54
    KWread    shift, and go to state 55
    ID        shift, and go to state 56

    array_ref    go to state 58
    assignment   go to state 59
    conditional  go to state 60
    while_       go to state 61
    for_         go to state 62
    ret          go to state 63
    func_call    go to state 64


State 124

   36 assignment: array_ref ASSIGN expr . ';'
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ';'  shift, and go to state 151


State 125

   32 array_ref: array_ref '[' expr . ']'
   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112
    ']'  shift, and go to state 152


State 126

    7 func_return_type: ':' scalar_type .

    $default  reduce using rule 7 (func_return_type)


State 127

    8 func_decl: ID '(' args ')' func_return_type ';' .

    $default  reduce using rule 8 (func_decl)


State 128

    9 func_def: ID '(' args ')' func_return_type compound . KWend

    KWend  shift, and go to state 153


State 129

   55 expr: '(' expr ')' .

    $default  reduce using rule 55 (expr)


State 130

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   54     | expr MOD expr .
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    '*'  shift, and go to state 112

    $default  reduce using rule 54 (expr)


State 131

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   59     | expr LE expr .
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 59 (expr)


State 132

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   61     | expr NE expr .
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 61 (expr)


State 133

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   60     | expr GE expr .
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 60 (expr)


State 134

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   62     | expr AND expr .
   63     | expr . OR expr

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 62 (expr)


State 135

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr
   63     | expr OR expr .

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 63 (expr)


State 136

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   56     | expr '<' expr .
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 56 (expr)


State 137

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   57     | expr '>' expr .
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 57 (expr)


State 138

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   58     | expr '=' expr .
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 58 (expr)


State 139

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   51     | expr '-' expr .
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 51 (expr)


State 140

   50 expr: expr . '+' expr
   50     | expr '+' expr .
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    MOD  shift, and go to state 100
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 50 (expr)


State 141

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   53     | expr '/' expr .
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    '*'  shift, and go to state 112

    $default  reduce using rule 53 (expr)


State 142

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   52     | expr '*' expr .
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr

    $default  reduce using rule 52 (expr)


State 143

   42 while_: KWwhile expr KWdo compound . KWend KWdo

    KWend  shift, and go to state 154


State 144

   41 conditional: KWif expr KWthen compound . else_cond KWend KWif

    KWelse  shift, and go to state 155

    $default  reduce using rule 39 (else_cond)

    else_cond  go to state 156


State 145

   43 for_: KWfor ID ASSIGN Int . KWto Int KWdo compound KWend KWdo

    KWto  shift, and go to state 157


State 146

   35 assignment: ID ASSIGN expr ';' .

    $default  reduce using rule 35 (assignment)


State 147

   80 zeroORmore_expr: zeroORmore_expr ',' . expr

    NOT      shift, and go to state 70
    KWtrue   shift, and go to state 28
    KWfalse  shift, and go to state 29
    ID       shift, and go to state 71
    Int      shift, and go to state 30
    Oct_int  shift, and go to state 31
    Float    shift, and go to state 32
    Sci      shift, and go to state 33
    Str      shift, and go to state 34
    '-'      shift, and go to state 72
    '('      shift, and go to state 73

    const_int      go to state 38
    const_literal  go to state 74
    array_ref      go to state 75
    var_ref        go to state 76
    func_call      go to state 77
    expr           go to state 158


State 148

   45 func_call: ID '(' zeroORmore_expr ')' .

    $default  reduce using rule 45 (func_call)


State 149

   31 array_ref: ID '[' expr ']' .

    $default  reduce using rule 31 (array_ref)


State 150

   30 compound: KWbegin zeroORmore_decl zeroORmore_state compound zeroORmore_decl zeroORmore_state KWend .

    $default  reduce using rule 30 (compound)


State 151

   36 assignment: array_ref ASSIGN expr ';' .

    $default  reduce using rule 36 (assignment)


State 152

   32 array_ref: array_ref '[' expr ']' .

    $default  reduce using rule 32 (array_ref)


State 153

    9 func_def: ID '(' args ')' func_return_type compound KWend .

    $default  reduce using rule 9 (func_def)


State 154

   42 while_: KWwhile expr KWdo compound KWend . KWdo

    KWdo  shift, and go to state 159


State 155

   40 else_cond: KWelse . compound

    KWbegin  shift, and go to state 12

    compound  go to state 160


State 156

   41 conditional: KWif expr KWthen compound else_cond . KWend KWif

    KWend  shift, and go to state 161


State 157

   43 for_: KWfor ID ASSIGN Int KWto . Int KWdo compound KWend KWdo

    Int  shift, and go to state 162


State 158

   50 expr: expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . MOD expr
   56     | expr . '<' expr
   57     | expr . '>' expr
   58     | expr . '=' expr
   59     | expr . LE expr
   60     | expr . GE expr
   61     | expr . NE expr
   62     | expr . AND expr
   63     | expr . OR expr
   80 zeroORmore_expr: zeroORmore_expr ',' expr .

    MOD  shift, and go to state 100
    LE   shift, and go to state 101
    NE   shift, and go to state 102
    GE   shift, and go to state 103
    AND  shift, and go to state 104
    OR   shift, and go to state 105
    '<'  shift, and go to state 106
    '>'  shift, and go to state 107
    '='  shift, and go to state 108
    '-'  shift, and go to state 109
    '+'  shift, and go to state 110
    '/'  shift, and go to state 111
    '*'  shift, and go to state 112

    $default  reduce using rule 80 (zeroORmore_expr)


State 159

   42 while_: KWwhile expr KWdo compound KWend KWdo .

    $default  reduce using rule 42 (while_)


State 160

   40 else_cond: KWelse compound .

    $default  reduce using rule 40 (else_cond)


State 161

   41 conditional: KWif expr KWthen compound else_cond KWend . KWif

    KWif  shift, and go to state 163


State 162

   43 for_: KWfor ID ASSIGN Int KWto Int . KWdo compound KWend KWdo

    KWdo  shift, and go to state 164


State 163

   41 conditional: KWif expr KWthen compound else_cond KWend KWif .

    $default  reduce using rule 41 (conditional)


State 164

   43 for_: KWfor ID ASSIGN Int KWto Int KWdo . compound KWend KWdo

    KWbegin  shift, and go to state 12

    compound  go to state 165


State 165

   43 for_: KWfor ID ASSIGN Int KWto Int KWdo compound . KWend KWdo

    KWend  shift, and go to state 166


State 166

   43 for_: KWfor ID ASSIGN Int KWto Int KWdo compound KWend . KWdo

    KWdo  shift, and go to state 167


State 167

   43 for_: KWfor ID ASSIGN Int KWto Int KWdo compound KWend KWdo .

    $default  reduce using rule 43 (for_)
